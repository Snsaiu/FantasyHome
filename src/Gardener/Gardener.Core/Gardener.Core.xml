<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gardener.Core</name>
    </assembly>
    <members>
        <member name="T:Gardener.Core.ApiFunctionFilter">
            <summary>
            swagger api json 生成操作过滤器
            </summary>
        </member>
        <member name="M:Gardener.Core.ApiFunctionFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="T:Gardener.Core.Audit.AuditActionFilter">
            <summary>
            审计过滤器
            </summary>
        </member>
        <member name="M:Gardener.Core.Audit.AuditActionFilter.#ctor(Gardener.Core.IAuthorizationManager,Gardener.Core.Audit.IAuditDataManager)">
            <summary>
            
            </summary>
            <param name="authorizationManager"></param>
            <param name="auditDataManager"></param>
        </member>
        <member name="M:Gardener.Core.Audit.AuditActionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.Audit.AuditActionFilter.GetRequestEncoding(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取编码
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.Audit.AuditActionFilter.ReadBodyAsync(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            读取body
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.Audit.AuditDataManager">
            <summary>
            当前请求的审计数据管理
            </summary>
        </member>
        <member name="M:Gardener.Core.Audit.AuditDataManager.GetAuditOperation">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.Audit.AuditDataManager.#ctor(Microsoft.Extensions.Logging.ILogger{Gardener.Core.Audit.AuditDataManager},Furion.DatabaseAccessor.IRepository{Gardener.Core.Entites.AuditOperation,Gardener.Core.Entites.GardenerAuditDbContextLocator},Furion.DatabaseAccessor.IRepository{Gardener.Core.Entites.AuditEntity,Gardener.Core.Entites.GardenerAuditDbContextLocator})">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="auditOperationRepository"></param>
            <param name="auditEntityRepository"></param>
        </member>
        <member name="M:Gardener.Core.Audit.AuditDataManager.SaveAuditOperation(Gardener.Core.Entites.AuditOperation)">
            <summary>
            保存操作审计
            </summary>
            <param name="auditOperation"></param>
        </member>
        <member name="M:Gardener.Core.Audit.AuditDataManager.GetAuditEntities">
            <summary>
            获取 实体审计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.Audit.AuditDataManager.SetAuditEntitys(System.Collections.Generic.List{Gardener.Core.Entites.AuditEntity})">
            <summary>
            设置实体审计数据
            </summary>
            <param name="auditEntitys"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.Audit.AuditDataManager.SaveAuditEntitys(System.Collections.Generic.List{Gardener.Core.Entites.AuditEntity})">
            <summary>
            保存实体审计数据
            </summary>
            <param name="auditEntitys"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.Audit.IAuditDataManager">
            <summary>
            当前请求的审计数据管理
            </summary>
        </member>
        <member name="M:Gardener.Core.Audit.IAuditDataManager.GetAuditEntities">
            <summary>
            获取 实体审计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.Audit.IAuditDataManager.SetAuditEntitys(System.Collections.Generic.List{Gardener.Core.Entites.AuditEntity})">
            <summary>
            设置实体审计数据
            </summary>
            <param name="auditEntitys"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.Audit.IAuditDataManager.SaveAuditEntitys(System.Collections.Generic.List{Gardener.Core.Entites.AuditEntity})">
            <summary>
            保存
            </summary>
            <param name="auditEntitys"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.Audit.IAuditDataManager.SaveAuditOperation(Gardener.Core.Entites.AuditOperation)">
            <summary>
            保存
            </summary>
            <param name="auditOperation"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.DataFilter.FilterHelper">
            <summary>
            查询表达式辅助操作类
            </summary>
        </member>
        <member name="M:Gardener.Core.DataFilter.FilterHelper.GetExpression``1(System.Collections.Generic.List{Gardener.Application.Dtos.FilterGroup})">
            <summary>
            获取指定查询条件组的查询表达式
            </summary>
            <typeparam name="T">表达式实体类型</typeparam>
            <param name="groups">查询条件组，如果为null，则直接返回 true 表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Gardener.Core.DataFilter.FilterHelper.GetExpression``1(Gardener.Application.Dtos.FilterRule)">
            <summary>
            获取指定查询条件的查询表达式
            </summary>
            <typeparam name="T">表达式实体类型</typeparam>
            <param name="rule">查询条件，如果为null，则直接返回 true 表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Gardener.Core.DataFilter.FilterHelper.ToOperateCode(Gardener.Enums.FilterOperate)">
            <summary>
            把查询操作的枚举表示转换为操作码
            </summary>
            <param name="operate">查询操作的枚举表示</param>
        </member>
        <member name="M:Gardener.Core.DataFilter.FilterHelper.GetFilterOperate(System.String)">
            <summary>
            获取操作码的查询操作枚举表示
            </summary>
            <param name="code">操作码</param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.DataFilter.FilterHelper.Divide(System.Collections.Generic.List{Gardener.Application.Dtos.FilterRule})">
            <summary>
            根据 or 拆分
            </summary>
            <param name="rules"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.DataFilter.FilterHelper.GetExpressionBody(System.Linq.Expressions.ParameterExpression,System.Collections.Generic.List{Gardener.Application.Dtos.FilterGroup})">
            <summary>
            
            </summary>
            <param name="param"></param>
            <param name="groups"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.DataFilter.FilterHelper.GetExpressionBody(System.Linq.Expressions.ParameterExpression,Gardener.Application.Dtos.FilterRule)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.DataFilter.FilterHelper.CheckFilterRule(System.Type,Gardener.Application.Dtos.FilterRule)">
            <summary>
            验证属性与属性值是否匹配 
            </summary>
            <param name="type">最后一个属性</param>
            <param name="rule">条件信息</param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.DataFilter.FilterService">
            <summary>
            查询表达式服务
            </summary>
        </member>
        <member name="M:Gardener.Core.DataFilter.FilterService.#ctor(System.IServiceProvider)">
            <summary>
            初始化一个<see cref="T:Gardener.Core.DataFilter.FilterService"/>类型的新实例
            </summary>
        </member>
        <member name="M:Gardener.Core.DataFilter.FilterService.GetExpression``1(System.Collections.Generic.List{Gardener.Application.Dtos.FilterGroup})">
            <summary>
            获取指定查询条件组的查询表达式
            </summary>
            <typeparam name="T">表达式实体类型</typeparam>
            <param name="group">查询条件组，如果为null，则直接返回 true 表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="T:Gardener.Core.IFilterService">
            <summary>
            定义过滤表达式功能
            </summary>
        </member>
        <member name="M:Gardener.Core.IFilterService.GetExpression``1(System.Collections.Generic.List{Gardener.Application.Dtos.FilterGroup})">
            <summary>
            获取指定查询条件组的查询表达式
            </summary>
            <typeparam name="T">表达式实体类型</typeparam>
            <param name="group">查询条件组，如果为null，则直接返回 true 表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="T:Gardener.Core.PagedQueryableExtensions">
            <summary>
            分部拓展类
            </summary>
        </member>
        <member name="M:Gardener.Core.PagedQueryableExtensions.ToPage``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            分页拓展
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.PagedQueryableExtensions.ToPageAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            分页拓展
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.PagedQueryableExtensions.OrderConditions``1(System.Linq.IQueryable{``0},Gardener.Application.Dtos.ListSortDirection[])">
            <summary>
            多字段排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="orderConditions"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.RepositoryExtensions">
            <summary>
            分部拓展类
            </summary>
        </member>
        <member name="M:Gardener.Core.RepositoryExtensions.FakeDeleteAsync``1(Furion.DatabaseAccessor.IRepository{``0},``0)">
            <summary>
            逻辑删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="repository"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.RepositoryExtensions.FakeDeleteByKeyAsync``2(Furion.DatabaseAccessor.IRepository{``0},``1)">
            <summary>
            逻辑删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="repository"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.FileStore.IFileStoreService">
            <summary>
            文件存储服务
            </summary>
        </member>
        <member name="M:Gardener.Core.FileStore.IFileStoreService.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Gardener.Core.FileStore.IFileStoreService.Get(System.String)">
            <summary>
            获取文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.FileStore.IFileStoreService.Save(System.IO.Stream,System.String)">
            <summary>
            保存文件
            </summary>
            <param name="file"></param>
            <param name="path"></param>
            <returns>文件访问路径</returns>
        </member>
        <member name="T:Gardener.Core.FileStore.LocalFileStoreService">
            <summary>
            本地文件存储服务
            </summary>
        </member>
        <member name="M:Gardener.Core.FileStore.LocalFileStoreService.#ctor(Microsoft.Extensions.Options.IOptions{Gardener.Core.FileStore.LocalFileStoreSettings},Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            
            </summary>
            <param name="options"></param>
            <param name="hostingEnvironment"></param>
        </member>
        <member name="M:Gardener.Core.FileStore.LocalFileStoreService.GetBaseDirectory">
            <summary>
            获取文件存储目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.FileStore.LocalFileStoreService.Save(System.IO.Stream,System.String)">
            <summary>
             保存文件
            </summary>
            <param name="file"></param>
            <param name="path"></param>
        </member>
        <member name="M:Gardener.Core.FileStore.LocalFileStoreService.Delete(System.String)">
            <summary>
             删除文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Gardener.Core.FileStore.LocalFileStoreService.Get(System.String)">
            <summary>
            获取文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.FileStore.LocalFileStoreSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gardener.Core.FileStore.LocalFileStoreSettings.BaseDirectory">
            <summary>
            存储的基础目录
            为空时，默认是wwwroot/upload 路径
            </summary>
        </member>
        <member name="P:Gardener.Core.FileStore.LocalFileStoreSettings.BaseUrl">
            <summary>
            文件访问路径
            </summary>
        </member>
        <member name="T:Gardener.Core.GardenerCoreStartup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gardener.Core.GardenerCoreStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:Gardener.Core.AuthKeyConstants">
            <summary>
            
            </summary>
        </member>
        <member name="F:Gardener.Core.AuthKeyConstants.ClientIdKeyName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Gardener.Core.AuthKeyConstants.ClientTypeKeyName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Gardener.Core.AuthKeyConstants.UserIsSuperAdministratorKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gardener.Core.AuthorizationManager">
            <summary>
            当前请求的权限管理 
            </summary>
        </member>
        <member name="F:Gardener.Core.AuthorizationManager._httpContextAccessor">
            <summary>
            请求上下文访问器
            </summary>
        </member>
        <member name="F:Gardener.Core.AuthorizationManager._userRepository">
            <summary>
            用户仓储
            </summary>
        </member>
        <member name="F:Gardener.Core.AuthorizationManager._functionRepository">
            <summary>
            功能仓储
            </summary>
        </member>
        <member name="F:Gardener.Core.AuthorizationManager._user">
            <summary>
            当前登录用户
            </summary>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Furion.DatabaseAccessor.IRepository{Gardener.Core.Entites.User},Furion.DatabaseAccessor.IRepository{Gardener.Core.Entites.Function})">
            <summary>
            构造函数
            </summary>
            <param name="httpContextAccessor"></param>
            <param name="userRepository"></param>
            <param name="functionRepository"></param>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.GetUserId">
            <summary>
            获取用户Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.GetUser">
            <summary>
            获取用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.IsSuperAdministrator">
            <summary>
            是否是超级管理员
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.GetContenxtFunction">
            <summary>
            获取当前请求的功能
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.ChecktContenxtFunction">
            <summary>
            检查权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.GetContextFunctionKey">
            <summary>
            获取功能Key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.GetContextEndpoint">
            <summary>
            获取节点信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.CurrentUserHaveResource(Gardener.Enums.HttpMethodType,System.String)">
            <summary>
            判断是否拥有该权限
            </summary>
            <param name="method"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.CurrentUserHaveResource(System.String)">
            <summary>
            判断是否拥有该权限
            </summary>
            <param name="functionKey"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.IAuthorizationManager">
            <summary>
            权限管理器
            </summary>
        </member>
        <member name="M:Gardener.Core.IAuthorizationManager.GetUserId">
            <summary>
            获取用户 Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.IAuthorizationManager.IsSuperAdministrator">
            <summary>
            是否是超级管理员
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.IAuthorizationManager.GetUser">
            <summary>
            获取用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.IAuthorizationManager.GetContenxtFunction">
            <summary>
            获取当前请求的功能
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.IAuthorizationManager.ChecktContenxtFunction">
            <summary>
            检查权限
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.JwtHandler">
            <summary>
            JWT 授权自定义处理程序
            </summary>
        </member>
        <member name="M:Gardener.Core.JwtHandler.PipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext)">
            <summary>
            请求管道
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.JwtHandler.PolicyPipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <param name="requirement"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.JsonWebToken">
            <summary>
            JWT
            </summary>
        </member>
        <member name="P:Gardener.Core.JsonWebToken.AccessToken">
            <summary>
            获取或设置 用于业务身份认证的AccessToken
            </summary>
        </member>
        <member name="P:Gardener.Core.JsonWebToken.AccessTokenExpires">
            <summary>
            获取或设置 AccessToken有效期，UTC标准
            </summary>
        </member>
        <member name="P:Gardener.Core.JsonWebToken.RefreshToken">
            <summary>
            获取或设置 用于刷新AccessToken的RefreshToken
            </summary>
        </member>
        <member name="P:Gardener.Core.JsonWebToken.RefreshTokenExpires">
            <summary>
            获取或设置 RefreshToken有效期，UTC标准
            </summary>
        </member>
        <member name="M:Gardener.Core.JsonWebToken.IsRefreshTokenExpired">
            <summary>
            刷新Token是否过期
            </summary>
        </member>
        <member name="M:Gardener.Core.JsonWebToken.IsAccessTokenExpired">
            <summary>
            刷新Token是否过期
            </summary>
        </member>
        <member name="T:Gardener.Core.IJwtBearerService">
            <summary>
            jwt
            </summary>
        </member>
        <member name="M:Gardener.Core.IJwtBearerService.CreateToken(System.Int32,Gardener.Enums.LoginClientType)">
            <summary>
            创建token
            </summary>
            <param name="userId"></param>
            <param name="clientType"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.IJwtBearerService.RefreshToken(System.String)">
            <summary>
            刷新token
            </summary>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.IJwtBearerService.RemoveCurrentUserRefreshToken">
            <summary>
            移除当前用户的刷新token
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.JwtBearerService">
            <summary>
            jwt
            </summary>
        </member>
        <member name="F:Gardener.Core.JwtBearerService._httpContextAccessor">
            <summary>
            请求上下文访问器
            </summary>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.#ctor(Furion.DatabaseAccessor.IRepository{Gardener.Core.Entites.UserToken},Microsoft.Extensions.Options.IOptions{Furion.Authorization.JWTSettingsOptions},Microsoft.Extensions.Options.IOptions{Gardener.Core.JwtRefreshTokenSettings},Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            
            </summary>
            <param name="repository"></param>
            <param name="jwtSettings"></param>
            <param name="jwtRefreshTokenOptions"></param>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.CreateToken(System.Int32,Gardener.Enums.LoginClientType)">
            <summary>
            创建token
            </summary>
            <param name="userId"></param>
            <param name="clientType"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.RefreshToken(System.String)">
            <summary>
            刷新token
            </summary>
            <param name="refreshTokenStr"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.CreateToken(System.Int32,Gardener.Enums.LoginClientType,Gardener.Core.Entites.UserToken)">
            <summary>
            创建token
            </summary>
            <param name="userId"></param>
            <param name="clientType"></param>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.CreateToken(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},Gardener.Core.JwtBearerService.JwtTokenType,Gardener.Core.Entites.UserToken)">
            <summary>
            创建token
            </summary>
            <param name="claims"></param>
            <param name="tokenType"></param>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.RemoveCurrentUserRefreshToken">
            <summary>
            移除当前用户的刷新token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.ReadToken(System.String,Gardener.Core.JwtBearerService.JwtTokenType)">
            <summary>
            从token中读取数据
            </summary>
            <param name="tokenStr"></param>
            <param name="jwtTokenType"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.JwtBearerService.JwtTokenType">
            <summary>
            token 类型
            </summary>
        </member>
        <member name="F:Gardener.Core.JwtBearerService.JwtTokenType.AccessToken">
            <summary>
            
            </summary>
        </member>
        <member name="F:Gardener.Core.JwtBearerService.JwtTokenType.RefreshToken">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gardener.Core.JwtRefreshTokenSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gardener.Core.JwtRefreshTokenSettings.RefreshExpireMins">
            <summary>
            获取或设置 RefreshToken有效期分钟数
            </summary>
        </member>
        <member name="P:Gardener.Core.JwtRefreshTokenSettings.IsRefreshAbsoluteExpired">
            <summary>
            获取或设置 RefreshToken是否绝对过期
            </summary>
        </member>
        <member name="P:Gardener.Core.JwtRefreshTokenSettings.IssuerSigningKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gardener.Core.PasswordEncrypt">
            <summary>
            加密密码
            </summary>
        </member>
        <member name="M:Gardener.Core.PasswordEncrypt.Encrypt(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <param name="encryptKey"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AuditServiceCollectionExtensions">
            <summary>
            审计
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AuditServiceCollectionExtensions.AddAudit(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加审计服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SecurityServiceCollectionExtensions">
            <summary>
            安全服务
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SecurityServiceCollectionExtensions.AddSecurity(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加安全服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
    </members>
</doc>
