<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gardener.Core</name>
    </assembly>
    <members>
        <member name="T:Gardener.Core.FileStore.IFileStoreService">
            <summary>
            文件存储服务
            </summary>
        </member>
        <member name="M:Gardener.Core.FileStore.IFileStoreService.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Gardener.Core.FileStore.IFileStoreService.Get(System.String)">
            <summary>
            获取文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.FileStore.IFileStoreService.Save(System.IO.Stream,System.String)">
            <summary>
            保存文件
            </summary>
            <param name="file"></param>
            <param name="path"></param>
            <returns>文件访问路径</returns>
        </member>
        <member name="T:Gardener.Core.FileStore.LocalFileStoreService">
            <summary>
            本地文件存储服务
            </summary>
        </member>
        <member name="M:Gardener.Core.FileStore.LocalFileStoreService.#ctor(Microsoft.Extensions.Options.IOptions{Gardener.Core.FileStore.LocalFileStoreSettings},Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Gardener.Core.FileStore.LocalFileStoreService.GetBaseDirectory">
            <summary>
            获取文件存储目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.FileStore.LocalFileStoreService.Save(System.IO.Stream,System.String)">
            <summary>
             保存文件
            </summary>
            <param name="file"></param>
            <param name="path"></param>
        </member>
        <member name="M:Gardener.Core.FileStore.LocalFileStoreService.Delete(System.String)">
            <summary>
             删除文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Gardener.Core.FileStore.LocalFileStoreService.Get(System.String)">
            <summary>
            获取文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.FileStore.LocalFileStoreSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gardener.Core.FileStore.LocalFileStoreSettings.BaseDirectory">
            <summary>
            存储的基础目录
            为空时，默认是wwwroot/upload 路径
            </summary>
        </member>
        <member name="P:Gardener.Core.FileStore.LocalFileStoreSettings.BaseUrl">
            <summary>
            文件访问路径
            </summary>
        </member>
        <member name="T:Gardener.Core.GardenerCoreStartup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gardener.Core.GardenerCoreStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:Gardener.Core.AuthKeyConstants">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gardener.Core.AuthorizationManager">
            <summary>
            权限管理器
            </summary>
        </member>
        <member name="F:Gardener.Core.AuthorizationManager._httpContextAccessor">
            <summary>
            请求上下文访问器
            </summary>
        </member>
        <member name="F:Gardener.Core.AuthorizationManager._userRepository">
            <summary>
            用户仓储
            </summary>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Furion.DatabaseAccessor.IRepository{Gardener.Core.Entites.User})">
            <summary>
            构造函数
            </summary>
            <param name="httpContextAccessor"></param>
            <param name="userRepository"></param>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.GetUserId">
            <summary>
            获取用户Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.IsSuperAdministrator">
            <summary>
            是否是超级管理员
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.CheckSecurity(System.String)">
            <summary>
            检查权限
            </summary>
            <param name="resourceKey"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.AuthorizationManager.CheckSecurity(Gardener.Enums.HttpMethodType,System.String)">
            <summary>
            检查权限
            </summary>
            <param name="method"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.IAuthorizationManager">
            <summary>
            权限管理器
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Gardener.Core.IAuthorizationManager.GetUserId" -->
        <member name="M:Gardener.Core.IAuthorizationManager.CheckSecurity(System.String)">
            <summary>
            检查授权
            </summary>
            <param name="resourceId"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.IAuthorizationManager.CheckSecurity(Gardener.Enums.HttpMethodType,System.String)">
            <summary>
            检查权限
            </summary>
            <param name="method"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.IAuthorizationManager.IsSuperAdministrator">
            <summary>
            是否是超级管理员
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.JsonWebToken">
            <summary>
            JWT
            </summary>
        </member>
        <member name="P:Gardener.Core.JsonWebToken.AccessToken">
            <summary>
            获取或设置 用于业务身份认证的AccessToken
            </summary>
        </member>
        <member name="P:Gardener.Core.JsonWebToken.AccessTokenExpires">
            <summary>
            获取或设置 AccessToken有效期，UTC标准
            </summary>
        </member>
        <member name="P:Gardener.Core.JsonWebToken.RefreshToken">
            <summary>
            获取或设置 用于刷新AccessToken的RefreshToken
            </summary>
        </member>
        <member name="P:Gardener.Core.JsonWebToken.RefreshTokenExpires">
            <summary>
            获取或设置 RefreshToken有效期，UTC标准
            </summary>
        </member>
        <member name="M:Gardener.Core.JsonWebToken.IsRefreshTokenExpired">
            <summary>
            刷新Token是否过期
            </summary>
        </member>
        <member name="M:Gardener.Core.JsonWebToken.IsAccessTokenExpired">
            <summary>
            刷新Token是否过期
            </summary>
        </member>
        <member name="T:Gardener.Core.IJwtBearerService">
            <summary>
            jwt
            </summary>
        </member>
        <member name="M:Gardener.Core.IJwtBearerService.CreateToken(System.Int32,Gardener.Enums.LoginClientType)">
            <summary>
            创建token
            </summary>
            <param name="userId"></param>
            <param name="clientType"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.IJwtBearerService.RefreshToken(System.String)">
            <summary>
            刷新token
            </summary>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.IJwtBearerService.RemoveCurrentUserRefreshToken">
            <summary>
            移除当前用户的刷新token
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.JwtBearerService">
            <summary>
            jwt
            </summary>
        </member>
        <member name="F:Gardener.Core.JwtBearerService._httpContextAccessor">
            <summary>
            请求上下文访问器
            </summary>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.#ctor(Furion.DatabaseAccessor.IRepository{Gardener.Core.Entites.UserToken},Microsoft.Extensions.Options.IOptions{Furion.Authorization.JWTSettingsOptions},Microsoft.Extensions.Options.IOptions{Gardener.Core.JwtRefreshTokenSettings},Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            
            </summary>
            <param name="repository"></param>
            <param name="jwtSettings"></param>
            <param name="jwtRefreshTokenOptions"></param>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.CreateToken(System.Int32,Gardener.Enums.LoginClientType)">
            <summary>
            创建token
            </summary>
            <param name="userId"></param>
            <param name="clientType"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.RefreshToken(System.String)">
            <summary>
            刷新token
            </summary>
            <param name="refreshTokenStr"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.CreateToken(System.Int32,Gardener.Enums.LoginClientType,Gardener.Core.Entites.UserToken)">
            <summary>
            创建token
            </summary>
            <param name="userId"></param>
            <param name="clientType"></param>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.CreateToken(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},Gardener.Core.JwtBearerService.JwtTokenType,Gardener.Core.Entites.UserToken)">
            <summary>
            创建token
            </summary>
            <param name="claims"></param>
            <param name="tokenType"></param>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.RemoveCurrentUserRefreshToken">
            <summary>
            移除当前用户的刷新token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Core.JwtBearerService.ReadToken(System.String,Gardener.Core.JwtBearerService.JwtTokenType)">
            <summary>
            从token中读取数据
            </summary>
            <param name="tokenStr"></param>
            <param name="jwtTokenType"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Core.JwtBearerService.JwtTokenType">
            <summary>
            token 类型
            </summary>
        </member>
        <member name="F:Gardener.Core.JwtBearerService.JwtTokenType.AccessToken">
            <summary>
            
            </summary>
        </member>
        <member name="F:Gardener.Core.JwtBearerService.JwtTokenType.RefreshToken">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gardener.Core.JwtRefreshTokenSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gardener.Core.JwtRefreshTokenSettings.RefreshExpireMins">
            <summary>
            获取或设置 RefreshToken有效期分钟数
            </summary>
        </member>
        <member name="P:Gardener.Core.JwtRefreshTokenSettings.IsRefreshAbsoluteExpired">
            <summary>
            获取或设置 RefreshToken是否绝对过期
            </summary>
        </member>
        <member name="P:Gardener.Core.JwtRefreshTokenSettings.IssuerSigningKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gardener.Core.PasswordEncrypt">
            <summary>
            加密密码
            </summary>
        </member>
        <member name="M:Gardener.Core.PasswordEncrypt.Encrypt(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <param name="encryptKey"></param>
            <returns></returns>
        </member>
    </members>
</doc>
