<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gardener.Authorization</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.DependencyInjection.AuthorizationExtensions">
            <summary>
            安全服务
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AuthorizationExtensions.AddAuthor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加安全服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Authorization.Core.AppAuthorizationPolicyProvider">
            <summary>
            授权策略提供器
            </summary>
        </member>
        <member name="P:Gardener.Authorization.Core.AppAuthorizationPolicyProvider.FallbackPolicyProvider">
            <summary>
            默认回退策略
            </summary>
        </member>
        <member name="M:Gardener.Authorization.Core.AppAuthorizationPolicyProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authorization.AuthorizationOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Gardener.Authorization.Core.AppAuthorizationPolicyProvider.GetDefaultPolicyAsync">
            <summary>
            获取默认策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Authorization.Core.AppAuthorizationPolicyProvider.GetFallbackPolicyAsync">
            <summary>
            获取回退策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Authorization.Core.AppAuthorizationPolicyProvider.GetPolicyAsync(System.String)">
            <summary>
            获取策略
            </summary>
            <param name="policyName"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Authorization.Core.AppAuthorizeRequirement">
            <summary>
            策略对应的需求
            </summary>
        </member>
        <member name="M:Gardener.Authorization.Core.AppAuthorizeRequirement.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="policies"></param>
        </member>
        <member name="P:Gardener.Authorization.Core.AppAuthorizeRequirement.Policies">
            <summary>
            策略
            </summary>
        </member>
        <member name="T:Gardener.Authorization.Core.AuthorizationService">
            <summary>
            当前请求的权限管理 
            </summary>
        </member>
        <member name="F:Gardener.Authorization.Core.AuthorizationService._httpContextAccessor">
            <summary>
            请求上下文访问器
            </summary>
        </member>
        <member name="F:Gardener.Authorization.Core.AuthorizationService._apiEndpointStoreService">
            <summary>
            功能仓储
            </summary>
        </member>
        <member name="F:Gardener.Authorization.Core.AuthorizationService._identityPermissionService">
            <summary>
            身份权限服务
            </summary>
        </member>
        <member name="F:Gardener.Authorization.Core.AuthorizationService._identityService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gardener.Authorization.Core.AuthorizationService.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Gardener.Authorization.Core.IApiEndpointStoreService,Gardener.Authorization.Core.IIdentityPermissionService,Gardener.Authentication.Core.IIdentityService)">
            <summary>
            构造函数
            </summary>
            <param name="httpContextAccessor"></param>
            <param name="apiEndpointStoreService"></param>
            <param name="identityPermissionService"></param>
            <param name="identityService"></param>
        </member>
        <member name="M:Gardener.Authorization.Core.AuthorizationService.GetApiEndpoint">
            <summary>
            获取当前请求的功能
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Authorization.Core.AuthorizationService.ChecktContenxtApiEndpoint">
            <summary>
            检查权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Authorization.Core.AuthorizationService.GetApiEndpointKeyFromContext">
            <summary>
            获取功能Key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Authorization.Core.AuthorizationService.GetContextEndpoint">
            <summary>
            获取节点信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Authorization.Core.AuthorizationService.GetApiEndpointFromContext">
            <summary>
            获取当前请求的功能
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Authorization.Core.AuthorizationService.GetIdentity">
            <summary>
            获取身份
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Authorization.Core.AuthorizationService.GetIdentityId">
            <summary>
            获取身份的编号
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gardener.Authorization.Core.JwtHandler">
            <summary>
            JWT 授权自定义处理程序
            </summary>
        </member>
        <member name="M:Gardener.Authorization.Core.JwtHandler.PipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext)">
            <summary>
            请求管道
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Authorization.Core.JwtHandler.PolicyPipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <param name="requirement"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Authorization.Core.PasswordEncryptHelper">
            <summary>
            加密密码
            </summary>
        </member>
        <member name="M:Gardener.Authorization.Core.PasswordEncryptHelper.Encrypt(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <param name="encryptKey"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Authorization.Core.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Gardener.Authorization.Core.Penetrates.AppAuthorizePrefix">
            <summary>
            授权策略前缀
            </summary>
        </member>
    </members>
</doc>
