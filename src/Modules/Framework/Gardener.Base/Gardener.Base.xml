<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gardener.Base</name>
    </assembly>
    <members>
        <member name="T:Gardener.Base.PagedQueryableExtensions">
            <summary>
            分部拓展类
            </summary>
        </member>
        <member name="M:Gardener.Base.PagedQueryableExtensions.ToPage``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            分页拓展
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.PagedQueryableExtensions.ToPageAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            分页拓展
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.PagedQueryableExtensions.OrderConditions``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Gardener.Base.ListSortDirection})">
            <summary>
            多字段排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="orderConditions"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.PagedQueryableExtensions.OrderConditions``1(System.Linq.IQueryable{``0},Gardener.Base.ListSortDirection[])">
            <summary>
            多字段排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="orderConditions"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Base.RepositoryExtensions">
            <summary>
            分部拓展类
            </summary>
        </member>
        <member name="M:Gardener.Base.RepositoryExtensions.FakeDeleteAsync``1(Furion.DatabaseAccessor.IRepository{``0},``0)">
            <summary>
            逻辑删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="repository"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.RepositoryExtensions.FakeDeleteNowAsync``1(Furion.DatabaseAccessor.IRepository{``0},``0)">
            <summary>
            逻辑删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="repository"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.RepositoryExtensions.FakeDeleteAsync``2(Furion.DatabaseAccessor.IRepository{``0,``1},``0)">
            <summary>
            逻辑删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TDbContextLocator"></typeparam>
            <param name="repository"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.RepositoryExtensions.FakeDeleteNowAsync``2(Furion.DatabaseAccessor.IRepository{``0,``1},``0)">
            <summary>
            逻辑删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TDbContextLocator"></typeparam>
            <param name="repository"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.RepositoryExtensions.FakeDeleteByKeyAsync``2(Furion.DatabaseAccessor.IRepository{``0},``1)">
            <summary>
            逻辑删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="repository"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.RepositoryExtensions.FakeDeleteNowByKeyAsync``2(Furion.DatabaseAccessor.IRepository{``0},``1)">
            <summary>
            逻辑删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="repository"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.RepositoryExtensions.FakeDeleteByKeyAsync``3(Furion.DatabaseAccessor.IRepository{``0,``2},``1)">
            <summary>
            逻辑删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TDbContextLocator"></typeparam>
            <param name="repository"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.RepositoryExtensions.FakeDeleteNowByKeyAsync``3(Furion.DatabaseAccessor.IRepository{``0,``2},``1)">
            <summary>
            逻辑删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TDbContextLocator"></typeparam>
            <param name="repository"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Base.GardenerEntityBase`3">
            <summary>
            基类
            </summary>
        </member>
        <member name="P:Gardener.Base.GardenerEntityBase`3.IsLocked">
            <summary>
            是否锁定
            </summary>
        </member>
        <member name="P:Gardener.Base.GardenerEntityBase`3.IsDeleted">
            <summary>
            是否删除
            </summary>
        </member>
        <member name="P:Gardener.Base.GardenerEntityBase`3.CreatorId">
            <summary>
            创建者编号
            </summary>
        </member>
        <member name="P:Gardener.Base.GardenerEntityBase`3.CreatorIdentityType">
            <summary>
            创建者身份类型
            </summary>
        </member>
        <member name="T:Gardener.Base.GardenerEntityBase`2">
            <summary>
            基类
            </summary>
        </member>
        <member name="T:Gardener.Base.GardenerEntityBase`1">
            <summary>
            基类
            </summary>
        </member>
        <member name="T:Gardener.Base.GardenerEntityBase">
            <summary>
            基类
            </summary>
        </member>
        <member name="T:Gardener.Base.DynamicFilterService">
            <summary>
            查询表达式服务
            </summary>
        </member>
        <member name="M:Gardener.Base.DynamicFilterService.#ctor(System.IServiceProvider)">
            <summary>
            初始化一个<see cref="T:Gardener.Base.DynamicFilterService"/>类型的新实例
            </summary>
        </member>
        <member name="M:Gardener.Base.DynamicFilterService.GetExpression``1(System.Collections.Generic.List{Gardener.Base.FilterGroup})">
            <summary>
            获取指定查询条件组的查询表达式
            </summary>
            <typeparam name="T">表达式实体类型</typeparam>
            <param name="groups">查询条件组，如果为null，则直接返回 true 表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="T:Gardener.Base.EntityEventNotityUtil">
            <summary>
            实体事件通知
            </summary>
        </member>
        <member name="M:Gardener.Base.EntityEventNotityUtil.GetPublisher">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.EntityEventNotityUtil.NotifyDeleteAsync``2(``1)">
            <summary>
            通知删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.EntityEventNotityUtil.NotifyDeletesAsync``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            通知批量删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.EntityEventNotityUtil.NotifyFakeDeleteAsync``2(``1)">
            <summary>
            通知逻辑删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.EntityEventNotityUtil.NotifyFakeDeletesAsync``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            通知批量逻辑删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.EntityEventNotityUtil.NotifyInsertAsync``1(``0)">
            <summary>
            通知插入
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.EntityEventNotityUtil.NotifyUpdateAsync``1(``0)">
            <summary>
            通知更新
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.EntityEventNotityUtil.NotifyLockAsync``1(``0)">
            <summary>
            通知锁定
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Base.FilterHelper">
            <summary>
            查询表达式辅助操作类
            </summary>
        </member>
        <member name="M:Gardener.Base.FilterHelper.GetExpression``1(System.Collections.Generic.List{Gardener.Base.FilterGroup})">
            <summary>
            获取指定查询条件组的查询表达式
            </summary>
            <typeparam name="T">表达式实体类型</typeparam>
            <param name="groups">查询条件组，如果为null，则直接返回 true 表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Gardener.Base.FilterHelper.GetExpression``1(Gardener.Base.FilterRule)">
            <summary>
            获取指定查询条件的查询表达式
            </summary>
            <typeparam name="T">表达式实体类型</typeparam>
            <param name="rule">查询条件，如果为null，则直接返回 true 表达式</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:Gardener.Base.FilterHelper.ToOperateCode(Gardener.Base.FilterOperate)">
            <summary>
            把查询操作的枚举表示转换为操作码
            </summary>
            <param name="operate">查询操作的枚举表示</param>
        </member>
        <member name="M:Gardener.Base.FilterHelper.GetFilterOperate(System.String)">
            <summary>
            获取操作码的查询操作枚举表示
            </summary>
            <param name="code">操作码</param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.FilterHelper.Divide(System.Collections.Generic.List{Gardener.Base.FilterRule})">
            <summary>
            根据 or 拆分
            </summary>
            <param name="rules"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.FilterHelper.GetExpressionBody(System.Linq.Expressions.ParameterExpression,System.Collections.Generic.List{Gardener.Base.FilterGroup})">
            <summary>
            
            </summary>
            <param name="param"></param>
            <param name="groups"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.FilterHelper.GetExpressionBody(System.Linq.Expressions.ParameterExpression,Gardener.Base.FilterRule)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.FilterHelper.CheckFilterRule(System.Type,Gardener.Base.FilterRule)">
            <summary>
            验证属性与属性值是否匹配 
            </summary>
            <param name="type">最后一个属性</param>
            <param name="rule">条件信息</param>
            <returns></returns>
        </member>
        <member name="T:Gardener.Base.IdentityUtil">
            <summary>
            身份快捷操作
            </summary>
        </member>
        <member name="M:Gardener.Base.IdentityUtil.GetIdentity">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.IdentityUtil.GetIdentityId">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gardener.Base.IdentityUtil.GetIdentityType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gardener.MSServiceBase`5">
            <summary>
            主从数据库操作基类
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <typeparam name="TEntity">主从数据实体类型</typeparam>
            <typeparam name="TEntityDto">数据实体对应DTO类型</typeparam>
            <typeparam name="TKey">数据实体主键类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
            <typeparam name="TSlaveDbContextLocator">从数据库上下文定位器</typeparam>
        </member>
        <member name="F:Gardener.MSServiceBase`5._repository">
            <summary>
            TEntity Repository
            </summary>
        </member>
        <member name="M:Gardener.MSServiceBase`5.#ctor(Furion.DatabaseAccessor.IMSRepository{`3,`4})">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Gardener.MSServiceBase`5.Insert(`1)">
            <summary>
            添加
            </summary>
            <remarks>
            添加一条数据
            </remarks>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.MSServiceBase`5.Update(`1)">
            <summary>
            更新
            </summary>
            <remarks>
            更新一条数据
            </remarks>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.MSServiceBase`5.Delete(`2)">
            <summary>
            删除
            </summary>
            <remarks>
            根据主键删除一条数据
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.MSServiceBase`5.Deletes(`2[])">
            <summary>
            批量删除
            </summary>
            <remarks>
            根据多个主键批量删除
            </remarks>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.MSServiceBase`5.FakeDelete(`2)">
            <summary>
            逻辑删除
            </summary>
            <remarks>
            根据主键逻辑删除
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.MSServiceBase`5.FakeDeletes(`2[])">
            <summary>
            批量逻辑删除
            </summary>
            <remarks>
            根据多个主键批量逻辑删除
            </remarks>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.MSServiceBase`5.Get(`2)">
            <summary>
            根据主键获取
            </summary>
            <remarks>
            根据主键查找一条数据
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.MSServiceBase`5.GetAll">
            <summary>
            查询所有
            </summary>
            <remarks>
            查找到所有数据
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Gardener.MSServiceBase`5.GetAllUsable">
            <summary>
            查询所有可以用的
            </summary>
            <remarks>
            查询所有可以用的(在有IsDelete、IsLock字段时会自动过滤)
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Gardener.MSServiceBase`5.GetPage(System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <remarks>
            根据分页参数，分页获取数据
            </remarks>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.MSServiceBase`5.Lock(`2,System.Boolean)">
            <summary>
            锁定
            </summary>
            <remarks>
            根据主键锁定或解锁数据（必须有IsLock才能生效）
            </remarks>
            <param name="id"></param>
            <param name="isLocked"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.MSServiceBase`5.Search(Gardener.Base.PageRequest)">
            <summary>
            搜索
            </summary>
            <remarks>
            搜索数据
            </remarks>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.MSServiceBase`3">
            <summary>
            主从数据库操作基类
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <typeparam name="TEntity">数据实体类型</typeparam>
            <typeparam name="TEntityDto">数据实体对应DTO类型</typeparam>
            <typeparam name="TSlaveDbContextLocator">从数据库上下文定位器</typeparam>
        </member>
        <member name="M:Gardener.MSServiceBase`3.#ctor(Furion.DatabaseAccessor.IMSRepository{Furion.DatabaseAccessor.MasterDbContextLocator,`2})">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:Gardener.MSServiceBase`4">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <typeparam name="TEntity">数据实体类型</typeparam>
            <typeparam name="TEntityDto">数据实体对应DTO类型</typeparam>
            <typeparam name="TKey">数据实体主键</typeparam>
            <typeparam name="TSlaveDbContextLocator">从数据库上下文定位器</typeparam>
        </member>
        <member name="M:Gardener.MSServiceBase`4.#ctor(Furion.DatabaseAccessor.IMSRepository{Furion.DatabaseAccessor.MasterDbContextLocator,`3})">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:Gardener.ServiceBase`4">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <typeparam name="TEntity">数据实体类型</typeparam>
            <typeparam name="TEntityDto">数据实体对应DTO类型</typeparam>
            <typeparam name="TKey">数据实体主键类型</typeparam>
            <typeparam name="TDbContextLocator">数据库上下文定位器</typeparam>
        </member>
        <member name="F:Gardener.ServiceBase`4._repository">
            <summary>
            TEntity Repository
            </summary>
        </member>
        <member name="M:Gardener.ServiceBase`4.#ctor(Furion.DatabaseAccessor.IRepository{`0,`3})">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Gardener.ServiceBase`4.#ctor(Furion.DatabaseAccessor.IRepository{`0})">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Gardener.ServiceBase`4.Insert(`1)">
            <summary>
            添加
            </summary>
            <remarks>
            添加一条数据
            </remarks>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.ServiceBase`4.Update(`1)">
            <summary>
            更新
            </summary>
            <remarks>
            更新一条数据
            </remarks>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.ServiceBase`4.Delete(`2)">
            <summary>
            删除
            </summary>
            <remarks>
            根据主键删除一条数据
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.ServiceBase`4.Deletes(`2[])">
            <summary>
            批量删除
            </summary>
            <remarks>
            根据多个主键批量删除
            </remarks>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.ServiceBase`4.FakeDelete(`2)">
            <summary>
            逻辑删除
            </summary>
            <remarks>
            根据主键逻辑删除
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.ServiceBase`4.FakeDeletes(`2[])">
            <summary>
            批量逻辑删除
            </summary>
            <remarks>
            根据多个主键批量逻辑删除
            </remarks>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.ServiceBase`4.Get(`2)">
            <summary>
            根据主键获取
            </summary>
            <remarks>
            根据主键查找一条数据
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.ServiceBase`4.GetAll">
            <summary>
            查询所有
            </summary>
            <remarks>
            查找到所有数据
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Gardener.ServiceBase`4.GetAllUsable">
            <summary>
            查询所有可以用的
            </summary>
            <remarks>
            查询所有可以用的(在有IsDelete、IsLock字段时会自动过滤)
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Gardener.ServiceBase`4.GetPage(System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <remarks>
            根据分页参数，分页获取数据
            </remarks>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.ServiceBase`4.Lock(`2,System.Boolean)">
            <summary>
            锁定
            </summary>
            <remarks>
            根据主键锁定或解锁数据（必须有IsLock才能生效）
            </remarks>
            <param name="id"></param>
            <param name="isLocked"></param>
            <returns></returns>
        </member>
        <member name="M:Gardener.ServiceBase`4.Search(Gardener.Base.PageRequest)">
            <summary>
            搜索
            </summary>
            <remarks>
            搜索数据
            </remarks>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Gardener.ServiceBase`1">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <typeparam name="TEntity">数据实体类型</typeparam>
        </member>
        <member name="M:Gardener.ServiceBase`1.#ctor(Furion.DatabaseAccessor.IRepository{`0,Furion.DatabaseAccessor.MasterDbContextLocator})">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Gardener.ServiceBase`1.#ctor(Furion.DatabaseAccessor.IRepository{`0})">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:Gardener.ServiceBase`2">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <typeparam name="TEntity">数据实体类型</typeparam>
            <typeparam name="TEntityDto">数据实体对应DTO类型</typeparam>
        </member>
        <member name="M:Gardener.ServiceBase`2.#ctor(Furion.DatabaseAccessor.IRepository{`0,Furion.DatabaseAccessor.MasterDbContextLocator})">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Gardener.ServiceBase`2.#ctor(Furion.DatabaseAccessor.IRepository{`0})">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:Gardener.ServiceBase`3">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <typeparam name="TEntity">数据实体类型</typeparam>
            <typeparam name="TEntityDto">数据实体对应DTO类型</typeparam>
            <typeparam name="TKey">数据实体主键</typeparam>
        </member>
        <member name="M:Gardener.ServiceBase`3.#ctor(Furion.DatabaseAccessor.IRepository{`0,Furion.DatabaseAccessor.MasterDbContextLocator})">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Gardener.ServiceBase`3.#ctor(Furion.DatabaseAccessor.IRepository{`0})">
            <summary>
            继承此类即可实现基础方法
            方法包括：CURD、获取全部、分页获取 
            </summary>
            <param name="repository"></param>
        </member>
    </members>
</doc>
